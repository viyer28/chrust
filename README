# Halo
## A Self-Stabilizing Distributed Data Store
Written in Rust. <br>
If your machine does not have Rust installed: <br>
Please run the following in your terminal, then follow the on-screen instructions.

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

After Rust is successfully installed, you will need to configure your environment for the 'cargo' command:

```
source $HOME/.cargo/env
```
## Structure
The [src](src/) folder contains the following modules: <br>
* [main](src/main.rs) <br>
The main module initializes the node process. It parses command line arguments and starts listening for messages from the message broker.
* [handler](src/handler.rs) <br>
The handler module handles all messages sent and received to the message broker.
* [msg](src/msg.rs) <br>
The msg module defines message types to send/receive from the broker.
* [node](src/node.rs) <br>
The node module performed all read and write operations to the local storage of the node.
* [hash](src/hash.rs) <br>
The hash module defines helper functions for hashing a key to the ring topology of the distributed data store.
<br>
The files themselves are well-documented and will guide you through all the data structes and functions. I suggest reading them in the order presented above.

## Running
Make sure you have chistributed up and running on your machine. You can find instructions on how to install chistributed on a Linux computer in this [repository](https://github.com/uchicago-cs/chistributed). For non-Linux system, modify the third step of the installation process and replace the path to your local Python bin. <br>
<br>
You can build Halo for use with chistributed with:

```
cargo build
```
## Testing
Run chistributed tests from the [scripts](scripts/) directory. <br>
1.  fail-recover1
```
chistributed --run fail-recover1.chi
```
2.  fail-recover2
```
chistributed --run fail-recover2.chi
```
3.  partition-heal1
```
chistributed --run partition-heal1.chi
```
4.  partition-heal2
```
chistributed --run partition-heal2.chi
```